#!/bin/dash -f
# Configure wmii
wmiiscript=wmiirc # For wmii.sh
. wmii.sh

# TODO Make wmii start with tag [0] instead of 1
# TODO Make wmii easy to restart, like dear old dwm's Mod-Shift-Q

# Configuration Variables
MODKEY=Mod4
#UP=k
#DOWN=j
#LEFT=h
#RIGHT=l
UP=Up
DOWN=Down
LEFT=Left
RIGHT=Right

# ADDED tag names
VIEW_NAME='[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]'
getviewname(){ 
	i=$(($i+1))
	echo $VIEW_NAME | awk "{print $`echo $i`}"; 
}

# Bars
noticetimeout=5
noticebar=/rbar/!notice

# Colors tuples: "<text> <background> <border>"
# Colors: DarkBrown LightBrown TeXt BLack
export WMII_NORMCOLORS='#FF9C5B #301D10 #301D10' # TX DB DB 
export WMII_FOCUSCOLORS='#FF9C5B #4C280B #FF9C5B' # TX LB TX 

export WMII_BACKGROUND='#301D10' #DB
#export WMII_FONT='-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
export WMII_FONT='xft:Telegrama:pixelsize=13'

set -- $(echo $WMII_NORMCOLORS $WMII_FOCUSCOLORS)
#export WMII_MENU="dmenu -b -fn '$WMII_FONT' -nf '$1' -nb '$2' -sf '$4' -sb '$5'"
#WMII_MENU="dmenu -fn '$WMII_FONT' -nf '$1' -nb '$2' -sf '$4' -sb '$5'"
export WMII_TERM="urxvt"

# ADDED
export BROWSER="firefox"
export IRC="xchat"
export EDITOR="kalpana"
SOUND_TOGGLE="amixer sset Master toggle"

# Ask about MODKEY on first run
	if ! test -d "${WMII_CONFPATH%%:*}"; then
	    mkdir "${WMII_CONFPATH%%:*}"
	    res=$(wihack -type DIALOG xmessage -nearmouse -buttons Windows,Alt -print -fn $WMII_FONT \
	          "Welcome to wmii,$wi_newline$wi_newline" \
	          "Most of wmii's default key bindings make use of the$wi_newline" \
	          "Windows key, or equivalent. For keyboards lacking such$wi_newline" \
	          "a key, many users change this to the Alt key.$wi_newline$wi_newline" \
	          "Which would you prefer?")
	    [ "$res" = "Alt" ] && MODKEY=Mod1
	    echo "MODKEY=$MODKEY" >"${WMII_CONFPATH%%:*}/wmiirc_local"
	    chmod +x "${WMII_CONFPATH%%:*}/wmiirc_local"
	fi

# Menu history
hist="${WMII_CONFPATH%%:*}/history"
histnum=5000

# Column Rules
wmiir write /colrules <<!
	/gimp/ -> 17+83+41
	/.*/ -> 62+38 # Golden Ratio
#	/.*/ -> 50+50 # Liberté! Egalité! and so forth.
    /orage/ -> 400px
!
wmiir xwrite /ctl colmode default                                                                   
wmiir xwrite /tag/sel/ctl colmode sel default

# Tagging Rules
wmiir write /rules <<!
	# Apps with system tray icons like to their main windows
	# Give them permission.
	/^Pidgin:/ allow=+activate

	# MPlayer (and VLC, redacted) don't float by default, but should.
	/MPlayer/ floating=on

	# ROX puts all of its windows in the same group, so they open
	# with the same tags.  Disable grouping for ROX Filer.
	/^ROX-Filer:/ group=0

    # Sonata goes to the left
    /Sonata/ force-tags=[1]

    # Gpodder starts in tag 1
    /Gpodder/ force-tags=[1]

	# Firefox should open in tag 2
	/Firefox/ force-tags=[2]

	# Urxvt should open in tag 3
#	/urxvt/ force-tags=[3]

    # VLC goes to its own tag
    /vlc/ force-tags=[5]

    # Communications go to channel 7
    /.*pidgin.*/ force-tags=[7]
    /.*xchat.*/ force-tags=[7]

	# Other stuff?
	/orage|einstein/ floating=on
!

theclock() {
	echo -n label $(date '+%F %V-%u >> %R')
}

# Status Bar Info
status() {
#	echo -n label $(uptime | sed 's/.*://; s/, / /g') '|' $(date '+%F %R')
#   wm_status.sh
     
    # Update wmii status bar with the title of the currently selected window.
    #
    # This is an experiment with regard to the idea of removing wmii's window
    # title bars. Without them, the title should be shown somewhere, and this
    # should be the status bar like other tiling window managers, including
    # xmonad and awesome, do.
     
    CMD="wmiir read /client/sel/label"
    # Start label name with a symbol with a high ASCII value to have the label
    # positioned as one of the last labels of the left bar.
    BAR_LABEL="/lbar/}_title"
    #COLORS="#FF0000 #00FF00 #0000FF" # was used in echo -n label "$COLORS $TITLE"
     
    # Remove bar on <ctrl -c=""> (2=SIGINT).
    trap "wmiir remove $BAR_LABEL 2> /dev/null; exit" 2
     
    wmiir remove $BAR_LABEL 2> /dev/null
    # `wmiir create` already reads from STDIN!
    echo | wmiir create $BAR_LABEL 2> /dev/null
     
    while true; do
        # Fetch the title of the currently selected window.
        TITLE=`$CMD`
        EMPTINESS="  >> "     
        echo -n label "$EMPTINESS $TITLE" | wmiir write $BAR_LABEL 2> /dev/null
        sleep 0.1
    done
}

# STARTUP WAS ORIGINALLY HERE

# Clock in right bar
#clock() {
#	echo -n $(date '+%F %R')
#}
#while clock | wmiir write /lbar/zclock; do
#	sleep 1
#done &
#echo -n clock | wmiir create /lbar/zclock

# Event processing
wi_events <<'!'
# Events
Event CreateTag
	echo colors "$WMII_NORMCOLORS$wi_newline" label "$@" | wmiir create "/lbar/$@"
Event DestroyTag
	wmiir remove "/lbar/$@"
Event FocusTag
	wmiir xwrite "/lbar/$@" colors "$WMII_FOCUSCOLORS"
Event UnfocusTag
	wmiir xwrite "/lbar/$@" colors "$WMII_NORMCOLORS"
Event UrgentTag
	shift
	wmiir xwrite "/lbar/$@" label "*$@"
Event NotUrgentTag
	shift
	wmiir xwrite "/lbar/$@" label "$@"
Event LeftBarClick LeftBarDND
	shift
	wmiir xwrite /ctl view "$@"
Event Unresponsive
	{
		client=$1; shift
		msg="The following client is not responding. What would you like to do?$wi_newline"
		resp=$(wihack -transient $client \
				  xmessage -nearmouse -buttons Kill,Wait -print \
				  -fn "${WMII_FONT%%,*}" "$msg $(wmiir read /client/sel/label)")
		if [ "$resp" = Kill ]; then
			wmiir xwrite /client/$client/ctl slay &
		fi
	}&
Event Notice
	wmiir xwrite $noticebar $wi_arg

	kill $xpid 2>/dev/null # Let's hope this isn't reused...
	{ sleep $noticetimeout; wmiir xwrite $noticebar ' '; }&
	xpid = $!

# Menus
# CHANGE: This is my try to disable the delete/kill menus for titlebars
#Menu Client-3-Delete
#	wmiir xwrite /client/$1/ctl kill
#Menu Client-3-Kill
#	wmiir xwrite /client/$1/ctl slay
#Menu Client-3-Fullscreen
#	wmiir xwrite /client/$1/ctl Fullscreen on
Event ClientMouseDown
	wi_fnmenu Client $2 $1 &

Menu LBar-3-Delete
	tag=$1; clients=$(wmiir read "/tag/$tag/index" | awk '/[^#]/{print $2}')
	for c in $clients; do
		if [ "$tag" = "$(wmiir read /client/$c/tags)" ]
		then wmiir xwrite /client/$c/ctl kill
		else wmiir xwrite /client/$c/ctl tags -$tag
		fi
		[ "$tag" = "$(wi_seltag)" ] &&
			wmiir xwrite /ctl view $(wi_tags | wi_nexttag)
	done
Event LeftBarMouseDown
	wi_fnmenu LBar "$@" &

# Actions
Action showkeys
	echo "$KeysHelp" | xmessage -file - -fn ${WMII_FONT%%,*}
Action quit
	wmiir xwrite /ctl quit
Action exec
	wmiir xwrite /ctl exec "$@"
Action rehash
	wi_proglist $PATH >$progsfile
Action status
	set +xv
	if wmiir remove /rbar/status 2>/dev/null; then
		sleep 2
	fi
	echo colors "$WMII_NORMCOLORS" | wmiir create /rbar/status
	while status | wmiir write /rbar/status; do
		sleep 1
	done
Action theclock
    set +xv
    if wmiir remove /rbar/theclock 2>/dev/null; then
        sleep 2
    fi
    echo colors "$WMII_NORMCOLORS" | wmiir create /rbar/theclock
    while theclock | wmiir write /rbar/theclock; do
        sleep 1
    done

# Key Bindings
KeyGroup Moving around
Key $MODKEY-$LEFT   # Select the client to the left
	wmiir xwrite /tag/sel/ctl select left
Key $MODKEY-$RIGHT  # Select the client to the right
	wmiir xwrite /tag/sel/ctl select right
Key $MODKEY-$UP	 # Select the client above
	wmiir xwrite /tag/sel/ctl select up
Key $MODKEY-$DOWN   # Select the client below
	wmiir xwrite /tag/sel/ctl select down

Key $MODKEY-space   # Toggle between floating and managed layers
	wmiir xwrite /tag/sel/ctl select toggle

KeyGroup Moving through stacks
Key $MODKEY-Control-$UP	# Select the stack above
	wmiir xwrite /tag/sel/ctl select up stack
Key $MODKEY-Control-$DOWN  # Select the stack below
	wmiir xwrite /tag/sel/ctl select down stack

KeyGroup Moving clients around
Key $MODKEY-Shift-$LEFT   # Move selected client to the left
	wmiir xwrite /tag/sel/ctl send sel left
Key $MODKEY-Shift-$RIGHT  # Move selected client to the right
	wmiir xwrite /tag/sel/ctl send sel right
Key $MODKEY-Shift-$UP	 # Move selected client up
	wmiir xwrite /tag/sel/ctl send sel up
Key $MODKEY-Shift-$DOWN   # Move selected client down
	wmiir xwrite /tag/sel/ctl send sel down

Key $MODKEY-Shift-space   # Toggle selected client between floating and managed layers
	wmiir xwrite /tag/sel/ctl send sel toggle

KeyGroup Client actions
Key $MODKEY-Return # Toggle selected client's fullsceen state
	wmiir xwrite /client/sel/ctl Fullscreen toggle
Key $MODKEY-Shift-q # Close client
	wmiir xwrite /client/sel/ctl kill

KeyGroup Changing column modes
Key $MODKEY-d # Set column to default mode
	wmiir xwrite /tag/sel/ctl colmode sel default-max
Key $MODKEY-s # Set column to stack mode
	wmiir xwrite /tag/sel/ctl colmode sel stack-max
Key $MODKEY-m # Set column to max mode
	wmiir xwrite /tag/sel/ctl colmode sel stack+max

KeyGroup Running programs
Key $MODKEY-a	  # Open wmii actions menu
	action $(wi_actions | wimenu -h "${hist}.actions" -n $histnum) &
Key $MODKEY-w	  # Open program menu
#    eval wmiir setsid $WMII_MENU &
#	eval wmiir setsid "$(dmenu -h "${hist}.progs" -n $histnum <$progsfile)" &
	eval wmiir setsid "$(wimenu -h "${hist}.progs" -n $histnum <$progsfile)" &

Key $MODKEY-r # Launch a terminal
	eval wmiir setsid $WMII_TERM &

# ADDED OWN PROGRAM KEYBINDINGS
Key $MODKEY-f # Launch browser
	eval wmiir setsid $BROWSER &

Key $MODKEY-c # Launch irc client
	eval wmiir setsid $IRC &

Key $MODKEY-e # Launch text editor
	eval wmiir setsid $EDITOR &

Key XF86AudioMute # Here's to hoping that the mute button works
    eval SOUND_TOGGLE &    

KeyGroup Other
Key $MODKEY-Control-t # Toggle all other key bindings
	case $(wmiir read /keys | wc -l | tr -d ' \t\n') in
	0|1)
		echo -n "$Keys" | wmiir write /keys
		wmiir xwrite /ctl grabmod $MODKEY;;
	*)
		wmiir xwrite /keys $MODKEY-Control-t
		wmiir xwrite /ctl grabmod Mod3;;
	esac

KeyGroup Tag actions
Key $MODKEY-t	   # Change to another tag
	wmiir xwrite /ctl view $(wi_tags | wimenu -h "${hist}.tags" -n 50) &
Key $MODKEY-Shift-t # Retag the selected client
	# Assumes left-to-right order of evaluation
	wmiir xwrite /client/$(wi_selclient)/ctl tags $(wi_tags | wimenu -h "${hist}.tags" -n 50) &
Key $MODKEY-n		# Move to the next tag
	wmiir xwrite /ctl view $(wi_tags | wi_nexttag)
Key $MODKEY-b		# Move to the previous tag
	wmiir xwrite /ctl view $(wi_tags | sort -r | wi_nexttag)
!
# ADDED to enable tag names
	for i in 0 1 2 3 4 5 6 7 8 9; do
	    wi_events <<!
Key $MODKEY-$i	  # Move to the numbered view
	wmiir xwrite /ctl view "`getviewname $i`"
Key $MODKEY-Shift-$i	 # Retag selected client with the numbered tag
	wmiir xwrite /client/sel/ctl tags "`getviewname $i`"
!
done
## OLD code before tag naming
#	for i in 0 1 2 3 4 5 6 7 8 9; do
#		wi_events <<!
#Key $MODKEY-$i		 # Move to the numbered view
#	wmiir xwrite /ctl view "$i"
#Key $MODKEY-Shift-$i	 # Retag selected client with the numbered tag
#	wmiir xwrite /client/sel/ctl tags "$i"
#!
#done
wi_events -e

# WM Configuration
wmiir write /ctl <<!
	font $WMII_FONT
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod $MODKEY
	border 1
!
#xsetroot -solid "$WMII_BACKGROUND" &

# Generic overridable startup details
# NOTE: Moved here to see if it makes witray start with the right colours
# Unsure if the resulting placement of all the event loop stuff before it changes anything... 
startup() { witray -s 16 & }
wi_runconf -s wmiirc_local
startup

echo -n colors $WMII_NORMCOLORS | wmiir create $noticebar

# Misc
progsfile="$(wmiir namespace)/.proglist"
action status &
wi_proglist $PATH >$progsfile &

action theclock &

# Setup Tag Bar
IFS="$wi_newline"
wmiir rm $(wmiir ls -p /lbar) >/dev/null
seltag=$(wmiir read /tag/sel/ctl | sed 1q)
unset IFS
wi_tags | while read tag
do
	if [ "$tag" = "$seltag" ]; then
		echo colors "$WMII_FOCUSCOLORS"
		echo label $tag
	else
		echo colors "$WMII_NORMCOLORS"
		echo label $tag
	fi | wmiir create "/lbar/$tag"
done

wi_eventloop

